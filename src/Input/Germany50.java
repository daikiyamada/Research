package Input;

import Output.Visualization;
import Parameter.Parameter;
import edu.uci.ics.jung.graph.Graph;
import java.util.*;
public class Germany50 extends Value{
    public Graph<MyNode,MyEdge> Generator (Graph<MyNode,MyEdge> graph,int cost_type) {
        Parameter par = new Parameter();
        /**Adding nodes to graph*/
        MyNode n1 = new MyNode("Flensburg",1);
        graph.addVertex(n1);
        MyNode n2 = new MyNode("Kiel",2);
        graph.addVertex(n2);
        MyNode n3 = new MyNode("Hamburg",3);
        graph.addVertex(n3);
        MyNode n4 = new MyNode("Schwerin",4);
        graph.addVertex(n4);
        MyNode n5 = new MyNode("Greifswald",5);
        graph.addVertex(n5);
        MyNode n6 = new MyNode("Berlin",6);
        graph.addVertex(n6);
        MyNode n7 = new MyNode("Hannover",7);
        graph.addVertex(n7);
        MyNode n8 = new MyNode("Braunschweig",8);
        graph.addVertex(n8);
        MyNode n9 = new MyNode("Magdeburg",9);
        graph.addVertex(n9);
        MyNode n10 = new MyNode("Leipzig",10);
        graph.addVertex(n10);
        MyNode n11 = new MyNode("Dresden",11);
        graph.addVertex(n11);
        MyNode n12 = new MyNode("Chermnitz",12);
        graph.addVertex(n12);
        MyNode n13 = new MyNode("Kassel",13);
        graph.addVertex(n13);
        MyNode n14 = new MyNode("Fulda",14);
        graph.addVertex(n14);
        MyNode n15 = new MyNode("Wuerzburg",15);
        graph.addVertex(n15);
        MyNode n16 = new MyNode("Stuttgart",16);
        graph.addVertex(n16);
        MyNode n17 = new MyNode("Konstanz",17);
        graph.addVertex(n17);
        MyNode n18 = new MyNode("Erfurt",18);
        graph.addVertex(n18);
        MyNode n19 = new MyNode("Bayreuth",19);
        graph.addVertex(n19);
        MyNode n20 = new MyNode("Nuemberg",20);
        graph.addVertex(n20);
        MyNode n21 = new MyNode("Regensburg",21);
        graph.addVertex(n21);
        MyNode n22 = new MyNode("Passau",22);
        graph.addVertex(n22);
        MyNode n23 = new MyNode("Muenchen",23);
        graph.addVertex(n23);
        MyNode n24 = new MyNode("Augsburg",24);
        graph.addVertex(n24);
        MyNode n25 = new MyNode("Kempten",25);
        graph.addVertex(n25);
        MyNode n26 = new MyNode("Ulm",26);
        graph.addVertex(n26);
        MyNode n27 = new MyNode("Freiburg",27);
        graph.addVertex(n27);
        MyNode n28 = new MyNode("Karlsruhe",28);
        graph.addVertex(n28);
        MyNode n29 = new MyNode("Mannheim",29);
        graph.addVertex(n29);
        MyNode n30 = new MyNode("Darmstadt",30);
        graph.addVertex(n30);
        MyNode n31 = new MyNode("Frankfurt",31);
        graph.addVertex(n31);
        MyNode n32 = new MyNode("Giessen",32);
        graph.addVertex(n32);
        MyNode n33 = new MyNode("Kaiserslautem",33);
        graph.addVertex(n33);
        MyNode n34 = new MyNode("Saarbruecken",34);
        graph.addVertex(n34);
        MyNode n35 = new MyNode("Trier",35);
        graph.addVertex(n35);
        MyNode n36 = new MyNode("Koblenz",36);
        graph.addVertex(n36);
        MyNode n37 = new MyNode("Siegen",37);
        graph.addVertex(n37);
        MyNode n38 = new MyNode("Aachen",38);
        graph.addVertex(n38);
        MyNode n39 = new MyNode("Koeln",39);
        graph.addVertex(n39);
        MyNode n40 = new MyNode("Duesseldorf",40);
        graph.addVertex(n40);
        MyNode n41 = new MyNode("Essen",41);
        graph.addVertex(n41);
        MyNode n42 = new MyNode("Dortmund",42);
        graph.addVertex(n42);
        MyNode n43 = new MyNode("Wesel",43);
        graph.addVertex(n43);
        MyNode n44 = new MyNode("Muenster",44);
        graph.addVertex(n44);
        MyNode n45 = new MyNode("Bielefeld",45);
        graph.addVertex(n45);
        MyNode n46 = new MyNode("Osnabrueck",46);
        graph.addVertex(n46);
        MyNode n47 = new MyNode("Norden",47);
        graph.addVertex(n47);
        MyNode n48 = new MyNode("Oldenburg",48);
        graph.addVertex(n48);
        MyNode n49 = new MyNode("Bremen",49);
        graph.addVertex(n49);
        MyNode n50 = new MyNode("Bremerhaven",50);
        graph.addVertex(n50);
        /**Generating a available computing capacity*/
        for(MyNode n: graph.getVertices()){
            Random rnd = new Random();
            int resource = rnd.nextInt(par.node_resource_max-par.node_resource_min)+par.node_resource_min;
            r_n.put(n,resource);
        }
        /**Generating a unit cost of computing capacity*/
        for(MyNode n: graph.getVertices()){
            Random rnd = new Random();
            int cost = rnd.nextInt(par.node_cost_max-par.node_cost_min)+par.node_cost_min;
            c_n.put(n,cost);
        }
        /**Adding links to graph*/
        MyEdge e = new MyEdge(1);
        graph.addEdge(e,n1,n2);
        MyEdge e1 = new MyEdge(2);
        graph.addEdge(e1,n2,n4);
        MyEdge e2 = new MyEdge(3);
        graph.addEdge(e2,n4,n5);
        MyEdge e3 = new MyEdge(4);
        graph.addEdge(e3,n5,n6);
        MyEdge e4 = new MyEdge(5);
        graph.addEdge(e4,n4,n6);
        MyEdge e5 = new MyEdge(6);
        graph.addEdge(e5,n3,n4);
        MyEdge e6 = new MyEdge(7);
        graph.addEdge(e6,n2,n3);
        MyEdge e7 = new MyEdge(8);
        graph.addEdge(e7,n3,n7);
        MyEdge e8 = new MyEdge(9);
        graph.addEdge(e8,n3,n8);
        MyEdge e9 = new MyEdge(10);
        graph.addEdge(e9,n8,n9);
        MyEdge e10 = new MyEdge(11);
        graph.addEdge(e10,n7,n8);
        e = new MyEdge(12);
        graph.addEdge(e,n9,n6);
        e = new MyEdge(13);
        graph.addEdge(e,n6,n11);
        e = new MyEdge(14);
        graph.addEdge(e,n9,n10);
        e = new MyEdge(15);
        graph.addEdge(e,n10,n6);
        e = new MyEdge(16);
        graph.addEdge(e,n10,n11);
        e = new MyEdge(17);
        graph.addEdge(e,n11,n18);
        e = new MyEdge(18);
        graph.addEdge(e,n10,n18);
        e = new MyEdge(19);
        graph.addEdge(e,n10,n19);
        e = new MyEdge(20);
        graph.addEdge(e,n12,n18);
        e = new MyEdge(21);
        graph.addEdge(e,n11,n12);
        e = new MyEdge(22);
        graph.addEdge(e,n12,n19);
        e = new MyEdge(23);
        graph.addEdge(e,n19,n20);
        e = new MyEdge(24);
        graph.addEdge(e,n20,n21);
        e = new MyEdge(25);
        graph.addEdge(e,n21,n22);
        e = new MyEdge(26);
        graph.addEdge(e,n22,n23);
        e = new MyEdge(27);
        graph.addEdge(e,n21,n23);
        e = new MyEdge(28);
        graph.addEdge(e,n20,n23);
        e = new MyEdge(29);
        graph.addEdge(e,n23,n24);
        e = new MyEdge(30);
        graph.addEdge(e,n23,n25);
        e = new MyEdge(31);
        graph.addEdge(e,n25,n17);
        e = new MyEdge(32);
        graph.addEdge(e,n16,n17);
        e = new MyEdge(33);
        graph.addEdge(e,n16,n26);
        e = new MyEdge(34);
        graph.addEdge(e,n24,n26);
        e  = new MyEdge(35);
        graph.addEdge(e,n15,n24);
        e = new MyEdge(36);
        graph.addEdge(e,n15,n20);
        e = new MyEdge(37);
        graph.addEdge(e,n17,n27);
        e = new MyEdge(38);
        graph.addEdge(e,n27,n28);
        e = new MyEdge(39);
        graph.addEdge(e,n16,n28);
        e = new MyEdge(40);
        graph.addEdge(e,n16,n15);
        e = new MyEdge(41);
        graph.addEdge(e,n28,n34);
        e = new MyEdge(42);
        graph.addEdge(e,n28,n33);
        e = new MyEdge(43);
        graph.addEdge(e,n28,n29);
        e = new MyEdge(44);
        graph.addEdge(e,n29,n30);
        e = new MyEdge(45);
        graph.addEdge(e,n30,n33);
        e = new MyEdge(46);
        graph.addEdge(e,n33,n34);
        e = new MyEdge(47);
        graph.addEdge(e,n34,n35);
        e = new MyEdge(48);
        graph.addEdge(e,n35,n36);
        e = new MyEdge(49);
        graph.addEdge(e,n33,n36);
        e = new MyEdge(50);
        graph.addEdge(e,n31,n36);
        e = new MyEdge(51);
        graph.addEdge(e,n30,n31);
        e = new MyEdge(52);
        graph.addEdge(e,n31,n14);
        e = new MyEdge(53);
        graph.addEdge(e,n14,n15);
        e =new MyEdge(54);
        graph.addEdge(e,n31,n32);
        e= new MyEdge(55);
        graph.addEdge(e,n32,n14);
        e = new MyEdge(56);
        graph.addEdge(e,n15,n18);
        e = new MyEdge(57);
        graph.addEdge(e,n13,n18);
        e = new MyEdge(58);
        graph.addEdge(e,n13,n14);
        e = new MyEdge(59);
        graph.addEdge(e,n32,n13);
        e = new MyEdge(60);
        graph.addEdge(e,n32,n37);
        e = new MyEdge(61);
        graph.addEdge(e,n36,n37);
        e = new MyEdge(62);
        graph.addEdge(e,n36,n39);
        e = new MyEdge(63);
        graph.addEdge(e,n35,n38);
        e = new MyEdge(64);
        graph.addEdge(e,n38,n39);
        e = new MyEdge(65);
        graph.addEdge(e,n39,n40);
        e = new MyEdge(66);
        graph.addEdge(e,n41,n40);
        e = new MyEdge(67);
        graph.addEdge(e,n41,n42);
        e = new MyEdge(68);
        graph.addEdge(e,n37,n42);
        e = new MyEdge(69);
        graph.addEdge(e,n37,n45);
        e = new MyEdge(70);
        graph.addEdge(e,n13,n42);
        e = new MyEdge(71);
        graph.addEdge(e,n41,n43);
        e = new MyEdge(72);
        graph.addEdge(e,n38,n43);
        e = new MyEdge(73);
        graph.addEdge(e,n42,n44);
        e = new MyEdge(74);
        graph.addEdge(e,n8,n13);
        e = new MyEdge(75);
        graph.addEdge(e,n8,n45);
        e = new MyEdge(76);
        graph.addEdge(e,n45,n44);
        e = new MyEdge(77);
        graph.addEdge(e,n7,n45);
        e = new MyEdge(78);
        graph.addEdge(e,n46,n7);
        e = new MyEdge(79);
        graph.addEdge(e,n44,n46);
        e = new MyEdge(80);
        graph.addEdge(e,n43,n48);
        e = new  MyEdge(81);
        graph.addEdge(e,n43,n47);
         e= new MyEdge(82);
         graph.addEdge(e,n47,n48);
         e = new MyEdge(83);
         graph.addEdge(e,n48,n46);
         e = new MyEdge(84);
         graph.addEdge(e,n7,n49);
         e = new MyEdge(85);
         graph.addEdge(e,n4,n9);
         e = new MyEdge(86);
         graph.addEdge(e,n49,n50);
         e = new MyEdge(87);
         graph.addEdge(e,n50,n1);
        /**Generating a available network capacity*/
        Random rnd = new Random();
        for(MyEdge E:graph.getEdges()){
            int resource = rnd.nextInt(par.link_cost_max-par.link_cost_min)*100+par.link_cost_min*100;
            r_e.put(E,resource);
        }
        /**Generating a unit cost of network capacity*/
        for(MyEdge E:graph.getEdges()){
            int cost = rnd.nextInt(par.link_cost_max-par.link_cost_min)+par.link_cost_min;
            c_e.put(E,cost);
        }
        return graph;
    }
}
