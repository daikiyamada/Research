package Input;
import Parameter.Parameter;
import edu.uci.ics.jung.graph.*;
import java.util.*;
public class Pioro extends Value{
    public Graph<MyNode,MyEdge> Generator(Graph<MyNode,MyEdge> graph,int cost_type){
        /**Adding nodes to the graph*/
        /**Creating a node*/
        MyNode n1 = new MyNode("n",1);
        graph.addVertex(n1);
        MyNode n2 = new MyNode("n",2);
        graph.addVertex(n2);
        MyNode n3 = new MyNode("n",3);
        graph.addVertex(n3);
        MyNode n4 = new MyNode("n",4);
        graph.addVertex(n4);
        MyNode n5 = new MyNode("n",5);
        graph.addVertex(n5);
        MyNode n6 = new MyNode("n",6);
        graph.addVertex(n6);
        MyNode n7 = new MyNode("n",7);
        graph.addVertex(n7);
        MyNode n8 = new MyNode("n",8);
        graph.addVertex(n8);
        MyNode n9 = new MyNode("n",9);
        graph.addVertex(n9);
        MyNode n10 = new MyNode("n",10);
        graph.addVertex(n10);
        MyNode n11 = new MyNode("n",11);
        graph.addVertex(n11);
        MyNode n12 = new MyNode("n",12);
        graph.addVertex(n12);
        MyNode n13 = new MyNode("n",13);
        graph.addVertex(n13);
        MyNode n14 = new MyNode("n",14);
        graph.addVertex(n14);
        MyNode n15 = new MyNode("n",15);
        graph.addVertex(n15);
        MyNode n16 = new MyNode("n",16);
        graph.addVertex(n16);
        MyNode n17 = new MyNode("n",17);
        graph.addVertex(n17);
        MyNode n18 = new MyNode("n",18);
        graph.addVertex(n18);
        MyNode n19 = new MyNode("n",19);
        graph.addVertex(n19);
        MyNode n20 = new MyNode("n",20);
        graph.addVertex(n20);
        MyNode n21 = new MyNode("n",21);
        graph.addVertex(n21);
        MyNode n22 = new MyNode("n",22);
        graph.addVertex(n22);
        MyNode n23 = new MyNode("n",23);
        graph.addVertex(n23);
        MyNode n24 = new MyNode("n",24);
        graph.addVertex(n24);
        MyNode n25 = new MyNode("n",25);
        graph.addVertex(n25);
        MyNode n26 = new MyNode("n",26);
        graph.addVertex(n26);
        MyNode n27 = new MyNode("n",27);
        graph.addVertex(n27);
        MyNode n28 = new MyNode("n",28);
        graph.addVertex(n28);
        MyNode n29  = new MyNode("n",29);
        graph.addVertex(n29);
        MyNode n30 = new MyNode("n",30);
        graph.addVertex(n30);
        MyNode n31 = new MyNode("n",31);
        graph.addVertex(n31);
        MyNode n32 = new MyNode("n",32);
        graph.addVertex(n32);
        MyNode n33 = new MyNode("n",33);
        graph.addVertex(n33);
        MyNode n34 = new MyNode("n",34);
        graph.addVertex(n34);
        MyNode n35 = new MyNode("n",35);
        graph.addVertex(n35);
        MyNode n36 = new MyNode("n",36);
        graph.addVertex(n36);
        MyNode n37 = new MyNode("n",37);
        graph.addVertex(n37);
        MyNode n38 = new MyNode("n",38);
        graph.addVertex(n38);
        MyNode n39 = new MyNode("n",39);
        graph.addVertex(n39);
        MyNode n40 = new MyNode("n",40);
        graph.addVertex(n40);
        /**Generating a computing capacity and unit cost of computing capacity*/
        Parameter par = new Parameter();
        Random rnd = new Random();
        for(MyNode now:graph.getVertices()){
            int resource = rnd.nextInt(par.node_resource_max-par.node_resource_min)+par.node_resource_min;
            int cost = rnd.nextInt(par.node_cost_max-par.node_cost_min)+par.node_cost_min;
            r_n.put(now,resource);
            c_n.put(now,cost);
        }
        /**Adding links to the graph*/
        MyEdge e = new MyEdge(1);
        graph.addEdge(e,n1,n20);
        e = new MyEdge(2);
        graph.addEdge(e,n1,n17);
        e = new MyEdge(3);
        graph.addEdge(e,n1,n29);
        e = new MyEdge(4);
        graph.addEdge(e,n17,n20);
        e = new MyEdge(5);
        graph.addEdge(e,n17,n29);
        e = new MyEdge(6);
        graph.addEdge(e,n1,n13);
        e = new MyEdge(7);
        graph.addEdge(e,n20,n11);
        e = new MyEdge(8);
        graph.addEdge(e,n20,n13);
        e = new MyEdge(9);
        graph.addEdge(e,n13,n29);
        e = new MyEdge(10);
        graph.addEdge(e,n13,n11);
        e = new MyEdge(11);
        graph.addEdge(e,n1,n14);
        e = new MyEdge(12);
        graph.addEdge(e,n17,n37);
        e = new MyEdge(13);
        graph.addEdge(e,n14,n29);
        e = new MyEdge(14);
        graph.addEdge(e,n29,n38);
        e = new MyEdge(15);
        graph.addEdge(e,n14,n37);
        e = new MyEdge(16);
        graph.addEdge(e,n37,n6);
        e = new MyEdge(17);
        graph.addEdge(e,n14,n6);
        e = new MyEdge(18);
        graph.addEdge(e,n14,n4);
        e = new MyEdge(19);
        graph.addEdge(e,n37,n4);
        e = new MyEdge(20);
        graph.addEdge(e,n4,n6);
        e = new MyEdge(21);
        graph.addEdge(e,n4,n11);
        e = new MyEdge(22);
        graph.addEdge(e,n6,n11);
        e = new MyEdge(23);
        graph.addEdge(e,n37,n25);
        e = new MyEdge(24);
        graph.addEdge(e,n4,n2);
        e = new MyEdge(25);
        graph.addEdge(e,n6,n30);
        e = new MyEdge(26);
        graph.addEdge(e,n38,n34);
        e = new MyEdge(27);
        graph.addEdge(e,n38,n25);
        e = new MyEdge(28);
        graph.addEdge(e,n25,n7);
        e = new MyEdge(29);
        graph.addEdge(e,n7,n30);
        e = new MyEdge(30);
        graph.addEdge(e,n38,n5);
        e = new MyEdge(31);
        graph.addEdge(e,n25,n32);
        e = new MyEdge(32);
        graph.addEdge(e,n5,n32);
        e = new MyEdge(33);
        graph.addEdge(e,n5,n2);
        e = new MyEdge(34);
        graph.addEdge(e,n32,n2);
        e = new MyEdge(35);
        graph.addEdge(e,n32,n34);
        e = new MyEdge(36);
        graph.addEdge(e,n5,n34);
        e = new MyEdge(37);
        graph.addEdge(e,n34,n39);
        e = new MyEdge(38);
        graph.addEdge(e,n39,n30);
        e = new MyEdge(39);
        graph.addEdge(e,n34,n21);
        e = new MyEdge(40);
        graph.addEdge(e,n25,n36);
        e = new MyEdge(41);
        graph.addEdge(e,n36,n30);
        e = new MyEdge(42);
        graph.addEdge(e,n7,n36);
        e = new MyEdge(43);
        graph.addEdge(e,n39,n21);
        e = new MyEdge(44);
        graph.addEdge(e,n30,n10);
        e = new MyEdge(45);
        graph.addEdge(e,n2,n40);
        e = new MyEdge(46);
        graph.addEdge(e,n36,n10);
        e = new MyEdge(47);
        graph.addEdge(e,n40,n10);
        e = new MyEdge(48);
        graph.addEdge(e,n40,n23);
        e = new MyEdge(49);
        graph.addEdge(e,n23,n10);
        e = new MyEdge(50);
        graph.addEdge(e,n21,n28);
        e= new MyEdge(51);
        graph.addEdge(e,n7,n10);
        e = new MyEdge(52);
        graph.addEdge(e,n23,n24);
        e = new MyEdge(53);
        graph.addEdge(e,n22,n24);
        e = new MyEdge(54);
        graph.addEdge(e,n3,n24);
        e = new MyEdge(55);
        graph.addEdge(e,n18,n24);
        e = new MyEdge(56);
        graph.addEdge(e,n3,n22);
        e = new MyEdge(57);
        graph.addEdge(e,n18,n26);
        e=new MyEdge(58);
        graph.addEdge(e,n23,n22);
        e = new MyEdge(59);
        graph.addEdge(e,n3,n18);
        e = new MyEdge(60);
        graph.addEdge(e,n24,n26);
        e = new MyEdge(61);
        graph.addEdge(e,n40,n27);
        e = new MyEdge(62);
        graph.addEdge(e,n31,n36);
        e = new MyEdge(63);
        graph.addEdge(e,n19,n26);
        e = new MyEdge(64);
        graph.addEdge(e,n26,n27);
        e = new MyEdge(65);
        graph.addEdge(e,n19,n31);
        e= new MyEdge(66);
        graph.addEdge(e,n18,n22);
        e = new MyEdge(67);
        graph.addEdge(e,n3,n26);
        e = new MyEdge(68);
        graph.addEdge(e,n27,n19);
        e = new MyEdge(69);
        graph.addEdge(e,n27,n35);
        e = new MyEdge(70);
        graph.addEdge(e,n35,n31);
        e = new MyEdge(71);
        graph.addEdge(e,n31,n27);
        e= new MyEdge(72);
        graph.addEdge(e,n19,n28);
        e = new MyEdge(73);
        graph.addEdge(e,n19,n9);
        e = new MyEdge(74);
        graph.addEdge(e,n33,n35);
        e = new MyEdge(75);
        graph.addEdge(e,n9,n16);
        e = new MyEdge(76);
        graph.addEdge(e,n9,n15);
        e = new MyEdge(77);
        graph.addEdge(e,n8,n9);
        e = new MyEdge(78);
        graph.addEdge(e,n9,n33);
        e = new MyEdge(79);
        graph.addEdge(e,n33,n8);
        e = new MyEdge(80);
        graph.addEdge(e,n8,n15);
        e = new MyEdge(81);
        graph.addEdge(e,n15,n16);
        e = new MyEdge(82);
        graph.addEdge(e,n8,n16);
        e = new MyEdge(83);
        graph.addEdge(e,n15,n12);
        e = new MyEdge(84);
        graph.addEdge(e,n12,n16);
        e = new MyEdge(85);
        graph.addEdge(e,n12,n33);
        e = new MyEdge(86);
        graph.addEdge(e,n16,n28);
        e = new MyEdge(87);
        graph.addEdge(e,n28,n39);
        e = new MyEdge(88);
        graph.addEdge(e,n12,n39);
        /**Generating a network capacity*/
        /**Generating a unit cost of network capacity*/
        for(MyEdge now:graph.getEdges()){
            int resource = rnd.nextInt(par.link_resource_max-par.link_cost_min)*100+par.link_cost_min*100;
            int cost = rnd.nextInt(par.link_cost_max-par.link_cost_min)+par.link_cost_min;
            r_e.put(now,resource);
            c_e.put(now,cost);
        }
        return graph;
    }
}
